
For d900.exe, it needs to be launched directly using 2 command line parameters

d900.exe <filename> <mode>

where
 <filename> is the full path drive:directory\file.zsq
 <mode> is 0 to open, and 1 to create new
 
When debugging with IDA the file handles are identified as
.exe file = 0005
.ini file = 0006
.zsq file = 0006 again
.lcn file = 0006
.lcx file = 0007
.sqn file = 0008
.sqx file = 0009


.ZSQ File Reference...  F900DEMO.ZSQ (updated version)

Upon opening of a .zsq file, the following temp files are created

These files also comprise the final .ZSQ file and are in this order. The .zsq prefixes a 4-byte chunk at the start of each of these files which signifies its length in bytes

1. TMPWRKSQ.SQN 
    x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
		a) Starts with identifier string 61 00 00 01 0C 00 00 10 04 00 02 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00
		b) Length is always in multiples of 0x1000 bytes
		c) Offset 0Ah = 2
2. TMPWRKSQ.SQX
	  x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
    a) Starts with identifier string 61 00 00 02 00 00 00 10 00 00 01 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 
    b) Length is always in multiples of 0x1000 bytes
    c) Offset 0Ah = 1
3. TMPWRKSQ.LCN
		x) .zsq prepends block length in 32-bit Int Little-Endian:  00 20 00 00 = 0x2000 bytes
		a) Starts with identifier string 61 00 00 01 04 00 00 10 04 00 02 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00
		b) Length is always in multiples of 0x1000 bytes
		c) Offset 0Ah = 2
4. TMPWRKSQ.LCX
		x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
    a) Starts with identifier string 61 00 00 02 00 00 00 10 00 00 01 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00 
    b) Length is always in multiples of 0x1000 bytes
    c) Offset 0Ah = 1




Header Definition
 - Title
 - Description
 - Author
 - Start Message
 - Mode  seems to be either 'develop' or 'run_only'
 - Version
   - 0.004  26-04-2021 22:11:12
   
GROUP 'MAIN'

U37						74244			F900
U2						8288			F900
U62_PASS			8259			F900
U62_FAILSYNC	8259			F900

END GROUP




DASM Notes:

Subtroutine 423f:0039

This seems to be called for each file open... with 6 parameters for flexability.
                    NU    NU
OpenZSQ(f3c8h,013ch,4212h,0008h,6ce3h,4001h,0000) f900demo.zsq
OpenZSQ(f3c4h,020bh,4519h,0000h,711fh,0020h,0000) f900demo.zsq
OpenZSQ(0210h,0000h,f3c6h,00f4h,429ch,0020h,0080) tmpwrksq.sqn
OpenZSQ(0050h,4584h,01dbh,6f80h,0400h,0400h,0080) tmpwrksq.sqx
OpenZSQ(0050h,4584h,01dbh,6f80h,0400h,0004h,0080) tmpwrksq.lcn
OpenZSQ(0050h,4584h,01dbh,6f80h,0400h,0004h,0080) tmpwrksq.lcx


Data File Notes:
Word 00h - Always 0061h
Word 02h - HeaderDataStart - This is the starting address of the header data 
Byte 08h - Diff between N and X files
  00h: .sqx/.lcx files
  04h: .sqn/.lcn files
Byte 0Ah
  FFh: Unknown file type
  01h: .sqx/.lcx files
  02h: .sqn/.lcn files
Byte 10h - Can have following values
  FFh: .lcn/.lcx files (first chunk only)
  00h: .sqn/.sqx files
  63h: unknown, PC software looks for this type
Word 3Ah - Can have the following values
	0004h: .sqx
	0006h: .lcn/.sqn
	0008h: .sqx
	0014h: .lcx/
	0018h: .lcx/.sqx
  0040h: unknown, PC software looks for this type
Word 3Ch - Number of Chunks in this file (zero based) 0=1,1=2,2=3 etc
  0000h: .lcn/.sqn
  0002h: .lcx
  0003h: .sqx
  001Fh: Must be a max number or flag value, PC software looks for this type
  FFFFh: In all chunks except the first one
Word 3Eh - ChunkNumber - Represents how many data chunks are in this file. First chunk is always 0000 and they increment after that

Enum value at ds:7A39h which seems to be set due to a number of properties of the file being read.
These I think represent the basic cases that can be processed sucessfully.
0Ch
0Dh - .zsq or .sqx or .lcx file
0Eh
0Fh
16h
17h - Chunks loaded sucessfully
28h
2Bh
2Dh
2EhZSQ File Reference...  F900DEMO.ZSQ (updated version)

Upon opening of a .zsq file, the following temp files are created

These files also comprise the final .ZSQ file and are in this order. The .zsq prefixes a 4-byte chunk at the start of each of these files which signifies its length in bytes

1. TMPWRKSQ.SQN 
    x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
		a) Starts with identifier string 61 00 00 01 0C 00 00 10 04 00 02 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00
		b) Length is always in multiples of 0x1000 bytes
2. TMPWRKSQ.SQX
	  x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
    a) Starts with identifier string 61 00 00 02 00 00 00 10 00 00 01 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 
    b) Length is always in multiples of 0x1000 bytes
3. TMPWRKSQ.LCN
		x) .zsq prepends block length in 32-bit Int Little-Endian:  00 20 00 00 = 0x2000 bytes
		a) Starts with identifier string 61 00 00 01 04 00 00 10 04 00 02 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00
		b) Length is always in multiples of 0x1000 bytes
4. TMPWRKSQ.LCX
		x) .zsq prepends block length in 32-bit Int Little-Endian:  00 10 00 00 = 0x1000 bytes
    a) Starts with identifier string 61 00 00 02 00 00 00 10 00 00 01 00 00 00 00 00 00 00 01 00 05 00 00 00 00 00 00 00 
    b) Length is always in multiples of 0x1000 bytes




Header Definition
 - Title
 - Description
 - Author
 - Start Message
 - Mode  seems to be either 'develop' or 'run_only'
 - Version
   - 0.004  26-04-2021 22:11:12
   
GROUP 'MAIN'

U37						74244			F900
U2						8288			F900
U62_PASS			8259			F900
U62_FAILSYNC	8259			F900

END GROUP
\
01EB:0000